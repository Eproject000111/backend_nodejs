#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var path = require('path');
// const config = require('../config/configEnv');

// require('dotenv').config();
var {connectDB} = require("./../config/config.db")

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP/HTTPS server.
 */

let httpsOptions;

if(process.env.SSL == 'true')
{
  httpsOptions = {
    key: fs.readFileSync(path.join(__dirname, "ssl", "key.pem")),
    cert: fs.readFileSync(path.join(__dirname, "ssl", "cert.pem"))
  };
}

var server = process.env.NODE_ENV == 'production' ? https.createServer(httpsOptions, app) : http.createServer(app);

// function Listenserver(){
//   if (config.SSL==="true") {
//     // var httpsOptions = {
//     //     key: fs.readFileSync(path.join(__dirname, "ssl", "key.pem")),
//     //     cert: fs.readFileSync(path.join(__dirname, "ssl", "cert.pem"))
//     // };
  
//     // var httpsServer = https.createServer(httpsOptions, app);

//     httpsServer.listen(port, function () {
//       console.log('-------------> SERVER RUNNING ON HTTPS <-----------------');
//   });
//   }
//   else{
//     // server.listen(port, function(){
//     //   console.log('-------------> SERVER RUNNING ON HTTP <-----------------');
//     // });
//     server.on('error', onError);
//     server.on('listening', onListening);
//   }
// }

// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

connectDB().then(()=>{
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
